import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useSearchParams } from 'react-router-dom';
import InfiniteScroll from 'react-infinite-scroll-component';
import { Search, Package, Filter } from 'lucide-react';
import ProductCard from './ProductCard';
import CategoryFilter from './CategoryFilter';
import LoadingSkeleton from './LoadingSkeleton';
import { fetchProducts, fetchCategories } from '../services/api';

// –•—É–∫ –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∞
const useDebounce = (value, delay) => {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};

const Catalog = ({ tg }) => {
  const [searchParams, setSearchParams] = useSearchParams();
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [hasMore, setHasMore] = useState(true);
  const [page, setPage] = useState(1);
  const [searchQuery, setSearchQuery] = useState(searchParams.get('search') || '');
  const [selectedCategory, setSelectedCategory] = useState(searchParams.get('category') || '');
  const [showFilters, setShowFilters] = useState(false);
  const [isLoadingMore, setIsLoadingMore] = useState(false);

  // –î–µ–±–∞—É–Ω—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (500ms)
  const debouncedSearchQuery = useDebounce(searchQuery, 500);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const loadCategories = async () => {
      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
        const categoriesData = await fetchCategories();
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categoriesData.length || 0} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        setCategories(categoriesData);
      } catch (error) {
        console.error('‚ùå Error loading categories:', error);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–≤–∞—Ä—ã –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –±–µ–∑ –Ω–∏—Ö
      }
    };
    loadCategories();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  const loadProducts = useCallback(async (pageNum = 1, reset = false) => {
    try {
      if (reset) {
        setLoading(true);
        setError(null);
      } else {
        setIsLoadingMore(true);
      }
      
      console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${selectedCategory || '–≤—Å–µ'}, –ø–æ–∏—Å–∫: ${debouncedSearchQuery || '–Ω–µ—Ç'}`);
      
      const productsData = await fetchProducts({
        page: pageNum,
        limit: 20, // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 20 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        categoryId: selectedCategory || null,
        search: debouncedSearchQuery || null
      });

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${productsData.products?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤`);

      if (reset) {
        setProducts(productsData.products || []);
        setPage(2); // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç 2
      } else {
        setProducts(prev => [...prev, ...(productsData.products || [])]);
        setPage(pageNum + 1);
      }
      
      setHasMore(productsData.hasMore);
    } catch (error) {
      console.error('‚ùå Error loading products:', error);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤';
      
      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (error.response?.status === 429) {
        errorMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      } else if (error.response?.status >= 500) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (error.message.includes('Network Error')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
      }
      
      setError(errorMessage);
    } finally {
      setLoading(false);
      setIsLoadingMore(false);
    }
  }, [selectedCategory, debouncedSearchQuery]);

  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–±—Ä–æ—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    loadProducts(1, true);
  }, [selectedCategory, debouncedSearchQuery]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  const handleSearch = (query) => {
    setSearchQuery(query);
    setSearchParams({ search: query });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleCategorySelect = (categoryId) => {
    setSelectedCategory(categoryId);
    setSearchParams({ category: categoryId });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleResetFilters = () => {
    setSelectedCategory('');
    setSearchQuery('');
    setSearchParams({});
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const loadMore = useCallback(() => {
    if (!isLoadingMore && hasMore && !loading) {
      loadProducts(page);
    }
  }, [isLoadingMore, hasMore, loading, loadProducts, page]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
  useEffect(() => {
    if (tg && products.length > 0) {
      tg.sendData(JSON.stringify({
        action: 'catalog_opened',
        productsCount: products.length,
        category: selectedCategory,
        search: debouncedSearchQuery
      }));
    }
  }, [tg, products.length, selectedCategory, debouncedSearchQuery]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  const loadingIndicator = useMemo(() => {
    if (loading) {
      return <LoadingSkeleton count={6} />;
    }
    if (isLoadingMore) {
      return <LoadingSkeleton count={4} />;
    }
    return null;
  }, [loading, isLoadingMore]);

  if (error) {
    return (
      <div className="container">
        <div className="error-message">
          <Package size={48} />
          <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p>{error}</p>
          <button 
            className="load-more-button"
            onClick={() => loadProducts(1, true)}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="catalog">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className="header">
        <div className="container">
          <h1>
            –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ 
            {loading && <span className="loading-indicator">üîÑ</span>}
            {products.length > 0 && `(${products.length})`}
          </h1>
          
          {/* –ü–æ–∏—Å–∫ */}
          <div className="search-container">
            <Search size={20} className="search-icon" />
            <input
              type="text"
              className="search-input"
              placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
              value={searchQuery}
              onChange={(e) => handleSearch(e.target.value)}
            />
            {searchQuery !== debouncedSearchQuery && (
              <span className="search-indicator">üîç</span>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
          <button
            className="filter-toggle"
            onClick={() => setShowFilters(!showFilters)}
          >
            <Filter size={20} />
            –§–∏–ª—å—Ç—Ä—ã
          </button>
        </div>
      </header>

      {/* –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      {showFilters && (
        <CategoryFilter
          categories={categories}
          selectedCategory={selectedCategory}
          onCategorySelect={handleCategorySelect}
          onReset={handleResetFilters}
        />
      )}

      {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
      <div className="container">
        <InfiniteScroll
          dataLength={products.length}
          next={loadMore}
          hasMore={hasMore}
          loader={loadingIndicator}
          endMessage={
            <div className="load-more">
              <p>–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({products.length} —Ç–æ–≤–∞—Ä–æ–≤)</p>
            </div>
          }
          scrollThreshold={0.8}
        >
          <div className="products-grid">
            {products.map((product) => (
              <ProductCard
                key={product.id}
                product={product}
                tg={tg}
              />
            ))}
          </div>
        </InfiniteScroll>

        {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ */}
        {!loading && products.length === 0 && (
          <div className="empty-state">
            <Package size={48} className="empty-state-icon" />
            <h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>
              {debouncedSearchQuery 
                ? `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${debouncedSearchQuery}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
                : '–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤'
              }
            </p>
            <button 
              className="load-more-button"
              onClick={handleResetFilters}
            >
              –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Catalog; 