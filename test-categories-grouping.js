const axios = require('axios');

const API_BASE = 'https://gp-katalog-bot.onrender.com/api';

async function testCategoriesAndGrouping() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Ç–æ–≤–∞—Ä–æ–≤...\n');

  try {
    // –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
    const startTime1 = Date.now();
    const categoriesResponse = await axios.get(`${API_BASE}/categories`);
    const endTime1 = Date.now();
    
    const categories = categoriesResponse.data || [];
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${endTime1 - startTime1}ms`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('\nüìã –ü–µ—Ä–≤—ã–µ 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
    categories.slice(0, 5).forEach((cat, index) => {
      console.log(`${index + 1}. ${cat.name} (${cat.productCount} —Ç–æ–≤–∞—Ä–æ–≤)`);
    });
    
    // –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
    console.log('\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:');
    const startTime2 = Date.now();
    const productsResponse = await axios.get(`${API_BASE}/products?page=1&limit=100`);
    const endTime2 = Date.now();
    
    const products = productsResponse.data.products || [];
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${endTime2 - startTime2}ms`);
    console.log(`üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productsResponse.data.total || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const groups = {};
    const uncategorized = [];
    
    products.forEach(product => {
      if (product.categoryId && product.categoryName) {
        if (!groups[product.categoryId]) {
          groups[product.categoryId] = {
            id: product.categoryId,
            name: product.categoryName,
            products: []
          };
        }
        groups[product.categoryId].products.push(product);
      } else {
        uncategorized.push(product);
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (uncategorized.length > 0) {
      groups['uncategorized'] = {
        id: 'uncategorized',
        name: '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        products: uncategorized
      };
    }
    
    const groupedCategories = Object.values(groups);
    
    console.log(`\nüìÇ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:`);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${groupedCategories.length} –≥—Ä—É–ø–ø`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
    groupedCategories.forEach((group, index) => {
      console.log(`${index + 1}. ${group.name}: ${group.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    });
    
    // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫:');
    const startTime3 = Date.now();
    const searchResponse = await axios.get(`${API_BASE}/products?search=–≥–æ–≤—è–¥–∏–Ω–∞&page=1&limit=20`);
    const endTime3 = Date.now();
    
    const searchProducts = searchResponse.data.products || [];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${searchProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "–≥–æ–≤—è–¥–∏–Ω–∞"`);
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${endTime3 - startTime3}ms`);
    
    if (searchProducts.length > 0) {
      console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:');
      searchProducts.slice(0, 3).forEach((product, index) => {
        console.log(`${index + 1}. ${product.name} (${product.categoryName || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'})`);
      });
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
  }
}

testCategoriesAndGrouping(); 