#!/usr/bin/env node

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—É–Ω–Ω–µ–ª—è –¥–ª—è Telegram Web App...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ localtunnel
function checkLocaltunnel() {
  return new Promise((resolve) => {
    const check = spawn('npx', ['localtunnel', '--version'], { stdio: 'pipe' });
    
    check.on('close', (code) => {
      resolve(code === 0);
    });
    
    check.on('error', () => {
      resolve(false);
    });
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º localtunnel
function startLocaltunnel() {
  return new Promise((resolve, reject) => {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ localtunnel...');
    
    const tunnel = spawn('npx', ['localtunnel', '--port', '3000', '--subdomain', 'gp-katalog-bot'], {
      stdio: ['pipe', 'pipe', 'pipe']
    });
    
    let url = null;
    
    tunnel.stdout.on('data', (data) => {
      const output = data.toString();
      console.log('üì° –¢—É–Ω–Ω–µ–ª—å:', output.trim());
      
      // –ò—â–µ–º URL –≤ –≤—ã–≤–æ–¥–µ
      const urlMatch = output.match(/your url is: (https:\/\/[^\s]+)/);
      if (urlMatch) {
        url = urlMatch[1];
        console.log(`\n‚úÖ –¢—É–Ω–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω: ${url}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ —Ñ–∞–π–ª
        const envPath = path.join(__dirname, '.env');
        let envContent = '';
        
        if (fs.existsSync(envPath)) {
          envContent = fs.readFileSync(envPath, 'utf8');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º BASE_URL
        if (envContent.includes('BASE_URL=')) {
          envContent = envContent.replace(/BASE_URL=.*/g, `BASE_URL=${url}`);
        } else {
          envContent += `\nBASE_URL=${url}`;
        }
        
        fs.writeFileSync(envPath, envContent);
        console.log(`üìù BASE_URL –æ–±–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ`);
        
        resolve({ tunnel, url });
      }
    });
    
    tunnel.stderr.on('data', (data) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—É–Ω–Ω–µ–ª—è:', data.toString());
    });
    
    tunnel.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—É–Ω–Ω–µ–ª—è:', error.message);
      reject(error);
    });
    
    tunnel.on('close', (code) => {
      console.log(`üîå –¢—É–Ω–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç —Å –∫–æ–¥–æ–º: ${code}`);
    });
    
    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ URL –Ω–µ –Ω–∞–π–¥–µ–Ω
    setTimeout(() => {
      if (!url) {
        reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è URL —Ç—É–Ω–Ω–µ–ª—è'));
      }
    }, 10000);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    const hasLocaltunnel = await checkLocaltunnel();
    
    if (!hasLocaltunnel) {
      console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ localtunnel...');
      await new Promise((resolve, reject) => {
        const install = spawn('npm', ['install', '-g', 'localtunnel'], { stdio: 'inherit' });
        install.on('close', (code) => {
          if (code === 0) resolve();
          else reject(new Error(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º ${code}`));
        });
      });
    }
    
    const { tunnel, url } = await startLocaltunnel();
    
    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`üåê –í–∞—à –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${url}`);
    console.log(`üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç URL –≤ Telegram Web App`);
    console.log('\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—É–Ω–Ω–µ–ª—è –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
      console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—É–Ω–Ω–µ–ª—è...');
      tunnel.kill();
      process.exit(0);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É–Ω–Ω–µ–ª—è:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { startLocaltunnel, checkLocaltunnel }; 