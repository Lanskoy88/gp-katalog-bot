#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Render...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
  'package.json',
  'render.yaml',
  'server/index.js',
  'client/build/index.html'
];

console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:');
requiredFiles.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (!exists) {
    console.log(`    ‚ö†Ô∏è  –§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json:');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
  const requiredScripts = ['start', 'install-all'];
  requiredScripts.forEach(script => {
    const exists = packageJson.scripts && packageJson.scripts[script];
    console.log(`  ${exists ? '‚úÖ' : '‚ùå'} –°–∫—Ä–∏–ø—Ç "${script}"`);
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const requiredDeps = ['express', 'node-telegram-bot-api', 'axios'];
  requiredDeps.forEach(dep => {
    const exists = packageJson.dependencies && packageJson.dependencies[dep];
    console.log(`  ${exists ? '‚úÖ' : '‚ùå'} –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å "${dep}"`);
  });
  
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ render.yaml
console.log('\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ render.yaml:');
try {
  const renderYaml = fs.readFileSync('render.yaml', 'utf8');
  
  const requiredConfigs = [
    'type: web',
    'name: gp-katalog-bot',
    'env: node',
    'buildCommand: npm run install-all',
    'startCommand: npm start'
  ];
  
  requiredConfigs.forEach(config => {
    const exists = renderYaml.includes(config);
    console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${config}`);
  });
  
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è render.yaml:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
const envFile = '.env';
if (fs.existsSync(envFile)) {
  const envContent = fs.readFileSync(envFile, 'utf8');
  
  const requiredVars = [
    'TELEGRAM_BOT_TOKEN',
    'MOYSKLAD_API_TOKEN',
    'MOYSKLAD_ACCOUNT_ID'
  ];
  
  requiredVars.forEach(varName => {
    const exists = envContent.includes(varName + '=');
    console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${varName}`);
  });
} else {
  console.log('  ‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å–±–æ—Ä–∫–∏
console.log('\nüèóÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å–±–æ—Ä–∫–∏:');
const buildPath = path.join('client', 'build');
if (fs.existsSync(buildPath)) {
  const buildFiles = fs.readdirSync(buildPath);
  console.log(`  ‚úÖ –ü–∞–ø–∫–∞ build –Ω–∞–π–¥–µ–Ω–∞ (${buildFiles.length} —Ñ–∞–π–ª–æ–≤)`);
  
  const hasIndexHtml = fs.existsSync(path.join(buildPath, 'index.html'));
  console.log(`  ${hasIndexHtml ? '‚úÖ' : '‚ùå'} index.html`);
  
  const hasStatic = fs.existsSync(path.join(buildPath, 'static'));
  console.log(`  ${hasStatic ? '‚úÖ' : '‚ùå'} –ø–∞–ø–∫–∞ static`);
} else {
  console.log('  ‚ùå –ü–∞–ø–∫–∞ client/build –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  console.log('  üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run build');
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è Render:');
console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Render');
console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render Dashboard');
console.log('3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BASE_URL=https://gp-katalog-bot.onrender.com');
console.log('4. –û–±–Ω–æ–≤–∏—Ç–µ URL Web App –≤ BotFather –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è');

console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Render!');
console.log('üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: RENDER_SETUP.md'); 