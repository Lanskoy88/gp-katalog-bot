const axios = require('axios');
require('dotenv').config();

class ExistingApiTester {
  constructor() {
    this.baseURL = 'https://api.moysklad.ru/api/remap/1.2';
    this.apiToken = process.env.MOYSKLAD_API_TOKEN;
    this.accountId = process.env.MOYSKLAD_ACCOUNT_ID;
    
    this.client = axios.create({
      baseURL: this.baseURL,
      headers: {
        'Authorization': `Bearer ${this.apiToken}`,
        'Accept': 'application/json;charset=utf-8',
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });
  }

  async testAvailableEndpoints() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ú–æ–π–°–∫–ª–∞–¥...\n');

    const endpoints = [
      '/entity/product',
      '/entity/productfolder',
      '/entity/assortment',
      '/entity/good',
      '/entity/service',
      '/entity/bundle',
      '/entity/variant',
      '/entity/consignment',
      '/entity/slot',
      '/entity/enter',
      '/entity/store',
      '/entity/warehouse'
    ];

    for (const endpoint of endpoints) {
      try {
        console.log(`üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º ${endpoint}...`);
        const response = await this.client.get(`${endpoint}?limit=1`);
        console.log(`‚úÖ ${endpoint} - –¥–æ—Å—Ç—É–ø–µ–Ω (${response.data.meta && response.data.meta.size ? response.data.meta.size : 0} –∑–∞–ø–∏—Å–µ–π)`);
              } catch (error) {
          if (error.response && error.response.status === 403) {
            console.log(`‚ùå ${endpoint} - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (403)`);
          } else if (error.response && error.response.status === 404) {
            console.log(`‚ùå ${endpoint} - –Ω–µ –Ω–∞–π–¥–µ–Ω (404)`);
          } else {
            console.log(`‚ùå ${endpoint} - –æ—à–∏–±–∫–∞ ${error.response && error.response.status ? error.response.status : error.message}`);
          }
        }
    }
  }

  async analyzeProducts() {
    console.log('\nüì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–æ–≤...\n');

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
      const response = await this.client.get('/entity/product?limit=50');
      const products = response.data.rows;
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${response.data.meta.size} –≤—Å–µ–≥–æ\n`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      if (products.length > 0) {
        console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–∞:');
        const product = products[0];
        console.log(JSON.stringify(product, null, 2));
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        console.log('\nüîó –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤:');
        const categoryMap = {};
        const uncategorized = [];

        products.forEach(product => {
          if (product.productFolder) {
            const categoryId = product.productFolder.meta.href.split('/').pop();
            const categoryName = product.productFolder.name || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId}`;
            
            if (!categoryMap[categoryId]) {
              categoryMap[categoryId] = {
                id: categoryId,
                name: categoryName,
                products: []
              };
            }
            categoryMap[categoryId].products.push(product);
          } else {
            uncategorized.push(product);
          }
        });

        console.log('üìà –¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
        Object.values(categoryMap).forEach(category => {
          console.log(`   ${category.name}: ${category.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        });

        if (uncategorized.length > 0) {
          console.log(`   –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${uncategorized.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:');
        products.slice(0, 10).forEach((product, index) => {
          const categoryName = product.productFolder ? product.productFolder.name : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
          const price = product.salePrices && product.salePrices[0] ? product.salePrices[0].value / 100 : '–ù–µ—Ç —Ü–µ–Ω—ã';
          console.log(`${index + 1}. ${product.name} (${categoryName}) - ${price} —Ä—É–±.`);
        });
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
      if (error.response) {
        console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
        console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
      }
    }
  }

  async testProductFolderAccess() {
    console.log('\nüìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–∞–º —Ç–æ–≤–∞—Ä–æ–≤...\n');

    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ assortment
      const response = await this.client.get('/entity/assortment?filter=meta.type=productfolder&limit=10');
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–∞–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ assortment:');
      console.log(JSON.stringify(response.data, null, 2));
    } catch (error) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ assortment:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new ExistingApiTester();
  
  try {
    await tester.testAvailableEndpoints();
    await tester.analyzeProducts();
    await tester.testProductFolderAccess();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = ExistingApiTester; 