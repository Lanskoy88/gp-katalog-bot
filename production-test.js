const axios = require('axios');

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function retryRequest(fn, maxRetries = 3, delay = 2000) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await fn();
    } catch (error) {
      if (i === maxRetries - 1) throw error;
      console.log(`   ‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxRetries} —á–µ—Ä–µ–∑ ${delay}ms...`);
      await sleep(delay);
    }
  }
}

async function testProduction() {
  const PROD_URL = 'https://gp-katalog-bot.onrender.com';
  
  console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–î–ê–ö–®–ï–ù–ê');
  console.log('=' .repeat(50));
  console.log(`URL: ${PROD_URL}`);
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
  console.log('');
  
  const results = {
    health: false,
    products: false,
    categories: false,
    search: false,
    pagination: false,
    stats: false
  };
  
  try {
    // 1. Health Check
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...');
    try {
      const health = await retryRequest(() => 
        axios.get(`${PROD_URL}/health`, { timeout: 15000 })
      );
      console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${health.data.status}`);
      console.log(`   ü§ñ –ë–æ—Ç: ${health.data.botStatus}`);
      console.log(`   üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${health.data.environment}`);
      results.health = true;
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (—Å –º–µ–Ω—å—à–∏–º –ª–∏–º–∏—Ç–æ–º)
    console.log('\n2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
    try {
      const products = await retryRequest(() => 
        axios.get(`${PROD_URL}/api/products?page=1&limit=20`, { timeout: 45000 })
      );
      console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${products.data.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      console.log(`   üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.data.total}`);
      console.log(`   üîÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: ${products.data.hasMore ? '–ï—Å—Ç—å –µ—â–µ' : '–í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}`);
      
      if (products.data.products.length > 0) {
        console.log(`   üì¶ –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: ${products.data.products[0].name}`);
      }
      results.products = true;
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // 3. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('\n3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    try {
      const categories = await retryRequest(() => 
        axios.get(`${PROD_URL}/api/categories`, { timeout: 30000 })
      );
      console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${categories.data.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      
      if (categories.data.length > 0) {
        const categoriesWithProducts = categories.data.filter(cat => cat.productCount > 0);
        console.log(`   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏: ${categoriesWithProducts.length}`);
        console.log(`   üìÇ –ü—Ä–∏–º–µ—Ä: ${categories.data[0].name} (${categories.data[0].productCount} —Ç–æ–≤–∞—Ä–æ–≤)`);
      }
      results.categories = true;
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // 4. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞...');
    try {
      const search = await retryRequest(() => 
        axios.get(`${PROD_URL}/api/search?q=–º—è—Å–æ&limit=5`, { timeout: 25000 })
      );
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${search.data.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      console.log(`   üìä –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${search.data.total}`);
      
      if (search.data.products.length > 0) {
        console.log(`   üîç –ü—Ä–∏–º–µ—Ä: ${search.data.products[0].name}`);
      }
      results.search = true;
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // 5. –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...');
    try {
      const page2 = await retryRequest(() => 
        axios.get(`${PROD_URL}/api/products?page=2&limit=10`, { timeout: 25000 })
      );
      console.log(`   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: ${page2.data.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      console.log(`   üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${page2.data.total}`);
      console.log(`   üîÑ –ï—Å—Ç—å –µ—â–µ: ${page2.data.hasMore}`);
      results.pagination = true;
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n6Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...');
    try {
      const stats = await retryRequest(() => 
        axios.get(`${PROD_URL}/api/stats`, { timeout: 25000 })
      );
      console.log(`   ‚úÖ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats.data.allCategoriesCount}`);
      console.log(`   üëÅÔ∏è –í–∏–¥–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats.data.visibleCategoriesCount}`);
      console.log(`   üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${stats.data.productsCount}`);
      console.log(`   üí¨ –°—Ç–∞—Ç—É—Å: ${stats.data.message}`);
      results.stats = true;
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n' + '=' .repeat(50));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('=' .repeat(50));
    
    const passed = Object.values(results).filter(Boolean).length;
    const total = Object.keys(results).length;
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passed}/${total}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passed / total) * 100)}%`);
    
    if (passed >= 4) {
      console.log('\nüéâ –ü–†–û–î–ê–ö–®–ï–ù –ì–û–¢–û–í! –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!');
      console.log('üöÄ –ö–∞—Ç–∞–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
    } else if (passed >= 2) {
      console.log('\n‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é');
    } else {
      console.log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
    }
    
    console.log('\nüîó –°—Å—ã–ª–∫–∏:');
    console.log(`   üåê –ö–∞—Ç–∞–ª–æ–≥: ${PROD_URL}`);
    console.log(`   üì± Telegram Bot: @gp_katalog_bot`);
    console.log(`   üìä API: ${PROD_URL}/api`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:');
    console.log('   ‚Ä¢ Render –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º –ø—Ä–∏ "—Ö–æ–ª–æ–¥–Ω–æ–º" —Å—Ç–∞—Ä—Ç–µ');
    console.log('   ‚Ä¢ –ü–µ—Ä–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 30-60 —Å–µ–∫—É–Ω–¥');
    console.log('   ‚Ä¢ –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
axios.defaults.timeout = 60000;

testProduction(); 