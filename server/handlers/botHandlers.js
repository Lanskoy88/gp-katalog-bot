const moyskladService = require('../services/moyskladService');

class BotHandlers {
  setup(bot) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const username = msg.from.first_name;
      
      const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${username}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.`;
      
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
              web_app: {
                url: `${process.env.BASE_URL || 'http://localhost:3000'}/catalog`
              }
            }
          ],
          [
            {
              text: 'üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤',
              callback_data: 'categories'
            }
          ],
          [
            {
              text: 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤',
              callback_data: 'search'
            }
          ]
        ]
      };

      await bot.sendMessage(chatId, welcomeMessage, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /catalog
    bot.onText(/\/catalog/, async (msg) => {
      const chatId = msg.chat.id;
      
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
              web_app: {
                url: `${process.env.BASE_URL || 'http://localhost:3000'}/catalog`
              }
            }
          ]
        ]
      };

      await bot.sendMessage(chatId, '–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:', {
        reply_markup: keyboard
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    bot.onText(/\/admin/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
      const adminIds = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',') : [];
      
      if (!adminIds.includes(userId.toString())) {
        await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.');
        return;
      }

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
              web_app: {
                url: `${process.env.BASE_URL || 'http://localhost:3000'}/admin`
              }
            }
          ],
          [
            {
              text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
              callback_data: 'admin_stats'
            }
          ]
        ]
      };

      await bot.sendMessage(chatId, '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
        reply_markup: keyboard
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    bot.on('callback_query', async (callbackQuery) => {
      const chatId = callbackQuery.message.chat.id;
      const data = callbackQuery.data;

      switch (data) {
        case 'categories':
          await this.handleCategories(chatId, bot);
          break;
        case 'search':
          await this.handleSearch(chatId, bot);
          break;
        case 'admin_stats':
          await this.handleAdminStats(chatId, bot);
          break;
        default:
          if (data.startsWith('category_')) {
            const categoryId = data.replace('category_', '');
            await this.handleCategorySelection(chatId, categoryId, bot);
          }
      }

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
      await bot.answerCallbackQuery(callbackQuery.id);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ web app –¥–∞–Ω–Ω—ã—Ö
    bot.on('web_app_data', async (msg) => {
      const chatId = msg.chat.id;
      const data = msg.web_app_data.data;
      
      try {
        const parsedData = JSON.parse(data);
        console.log('Web app data received:', parsedData);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (parsedData.action === 'product_viewed') {
          await bot.sendMessage(chatId, `–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ —Ç–æ–≤–∞—Ä: ${parsedData.productName}`);
        }
      } catch (error) {
        console.error('Error parsing web app data:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    bot.on('error', (error) => {
      console.error('Bot error:', error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ polling –æ—à–∏–±–æ–∫
    bot.on('polling_error', (error) => {
      console.error('Polling error:', error);
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  async handleCategories(chatId, bot) {
    try {
      const categories = await moyskladService.getCategories();
      
      const keyboard = {
        inline_keyboard: categories.slice(0, 10).map(category => [
          {
            text: category.name,
            callback_data: `category_${category.id}`
          }
        ])
      };

      await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:', {
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error handling categories:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async handleCategorySelection(chatId, categoryId, bot) {
    try {
      const products = await moyskladService.getProductsWithImages(1, 5, categoryId);
      
      if (products.products.length === 0) {
        await bot.sendMessage(chatId, '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.');
        return;
      }

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
              web_app: {
                url: `${process.env.BASE_URL || 'http://localhost:3000'}/catalog?category=${categoryId}`
              }
            }
          ]
        ]
      };

      const message = `–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.total}\n\n–ü–æ–∫–∞–∑–∞–Ω–æ: ${products.products.length}`;
      
      await bot.sendMessage(chatId, message, {
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error handling category selection:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  async handleSearch(chatId, bot) {
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üîç –û—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫',
            web_app: {
              url: `${process.env.BASE_URL || 'http://localhost:3000'}/catalog?search=true`
            }
          }
        ]
      ]
    };

    await bot.sendMessage(chatId, '–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:', {
      reply_markup: keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  async handleAdminStats(chatId, bot) {
    try {
      const categories = await moyskladService.getCategories();
      const products = await moyskladService.getProducts(1, 1);
      
      const stats = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:\n\n` +
                   `üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}\n` +
                   `üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤: ${products.total}\n` +
                   `üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;

      await bot.sendMessage(chatId, stats);
    } catch (error) {
      console.error('Error handling admin stats:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }
}

module.exports = new BotHandlers(); 