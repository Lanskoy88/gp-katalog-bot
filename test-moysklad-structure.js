const axios = require('axios');
require('dotenv').config();

class MoyskladStructureAnalyzer {
  constructor() {
    this.baseURL = 'https://api.moysklad.ru/api/remap/1.2';
    this.apiToken = process.env.MOYSKLAD_API_TOKEN;
    this.accountId = process.env.MOYSKLAD_ACCOUNT_ID;
    
    this.client = axios.create({
      baseURL: this.baseURL,
      headers: {
        'Authorization': `Bearer ${this.apiToken}`,
        'Accept': 'application/json;charset=utf-8',
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });
  }

  async analyzeStructure() {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ú–æ–π–°–∫–ª–∞–¥...\n');

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      console.log('üìÅ –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
      const categoriesResponse = await this.client.get('/entity/productfolder');
      const categories = categoriesResponse.data.rows;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n`);

      // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
      console.log('üì¶ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã...');
      const productsResponse = await this.client.get('/entity/product?limit=1000');
      const products = productsResponse.data.rows;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤\n`);

      // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      console.log('üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
      categories.forEach((category, index) => {
        console.log(`${index + 1}. ${category.name}`);
        console.log(`   ID: ${category.id}`);
        console.log(`   –ü—É—Ç—å: ${category.pathName || '–ù–µ—Ç –ø—É—Ç–∏'}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${category.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`);
        if (category.productFolder) {
          console.log(`   –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.productFolder.meta.href}`);
        }
        console.log('');
      });

      // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑—å —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      console.log('üîó –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:');
      const categoryProductMap = {};
      const uncategorizedProducts = [];

      products.forEach(product => {
        if (product.productFolder) {
          const categoryId = product.productFolder.meta.href.split('/').pop();
          if (!categoryProductMap[categoryId]) {
            categoryProductMap[categoryId] = [];
          }
          categoryProductMap[categoryId].push(product);
        } else {
          uncategorizedProducts.push(product);
        }
      });

      console.log(`üìà –¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:`);
      Object.keys(categoryProductMap).forEach(categoryId => {
        const category = categories.find(c => c.id === categoryId);
        const categoryName = category ? category.name : `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId}`;
        console.log(`   ${categoryName}: ${categoryProductMap[categoryId].length} —Ç–æ–≤–∞—Ä–æ–≤`);
      });

      if (uncategorizedProducts.length > 0) {
        console.log(`   –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${uncategorizedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      }

      // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
      console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:');
      products.slice(0, 5).forEach((product, index) => {
        console.log(`${index + 1}. ${product.name}`);
        console.log(`   ID: ${product.id}`);
        console.log(`   –ö–æ–¥: ${product.code || '–ù–µ—Ç –∫–æ–¥–∞'}`);
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.productFolder ? product.productFolder.meta.href.split('/').pop() : '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}`);
        console.log(`   –¶–µ–Ω–∞: ${product.salePrices && product.salePrices[0] ? product.salePrices[0].value / 100 : '–ù–µ—Ç —Ü–µ–Ω—ã'} —Ä—É–±.`);
        console.log('');
      });

      // 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      console.log('üå≥ –ê–Ω–∞–ª–∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
      const categoryHierarchy = this.buildCategoryHierarchy(categories);
      this.printCategoryHierarchy(categoryHierarchy);

      return {
        categories,
        products,
        categoryProductMap,
        uncategorizedProducts,
        categoryHierarchy
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message);
      if (error.response) {
        console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
        console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
      }
      throw error;
    }
  }

  buildCategoryHierarchy(categories) {
    const categoryMap = {};
    const rootCategories = [];

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories.forEach(category => {
      categoryMap[category.id] = {
        ...category,
        children: []
      };
    });

    // –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é
    categories.forEach(category => {
      if (category.productFolder) {
        const parentId = category.productFolder.meta.href.split('/').pop();
        if (categoryMap[parentId]) {
          categoryMap[parentId].children.push(categoryMap[category.id]);
        }
      } else {
        rootCategories.push(categoryMap[category.id]);
      }
    });

    return rootCategories;
  }

  printCategoryHierarchy(categories, level = 0) {
    categories.forEach(category => {
      const indent = '  '.repeat(level);
      console.log(`${indent}${level === 0 ? 'üìÅ' : '  ‚îî‚îÄ'} ${category.name} (${category.id})`);
      
      if (category.children && category.children.length > 0) {
        this.printCategoryHierarchy(category.children, level + 1);
      }
    });
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function main() {
  const analyzer = new MoyskladStructureAnalyzer();
  
  try {
    await analyzer.analyzeStructure();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = MoyskladStructureAnalyzer; 