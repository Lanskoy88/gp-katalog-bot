const axios = require("axios");
const http = require('http');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
const testEndpoints = async () => {
  const baseUrl = 'http://localhost:3000';
  
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...\n');
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...');
  try {
    const healthResponse = await makeRequest(`${baseUrl}/api/health`);
    console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthResponse);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ API:', error.message);
  }
  
  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
  try {
    const statsResponse = await makeRequest(`${baseUrl}/api/stats`);
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', statsResponse);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
  }
  
  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
  try {
    const settingsResponse = await makeRequest(`${baseUrl}/api/category-settings`);
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', settingsResponse);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.message);
  }
  
  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥
  console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥...');
  try {
    const connectionResponse = await makeRequest(`${baseUrl}/api/test-connection`);
    console.log('‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', connectionResponse);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
  }
  
  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
  console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...');
  try {
    const adminResponse = await makeRequest(`${baseUrl}/admin`, 'GET', null, true);
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:', error.message);
  }
  
  console.log('\nüéØ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤—Ö–æ–¥—É –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä');
  console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000/admin');
  console.log('3. –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  console.log('4. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ú–æ–π–°–∫–ª–∞–¥, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
const makeRequest = (url, method = 'GET', data = null, textMode = false) => {
  return new Promise((resolve, reject) => {
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
      }
    };
    
    if (data) {
      options.body = JSON.stringify(data);
    }
    
    const req = http.request(url, options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode >= 200 && res.statusCode < 300) {
          if (textMode) {
            resolve('OK');
          } else {
            try {
              const parsed = JSON.parse(responseData);
              resolve(parsed);
            } catch (e) {
              resolve(responseData);
            }
          }
        } else {
          reject(new Error(`HTTP ${res.statusCode}: ${responseData}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(error);
    });
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testEndpoints().catch(console.error);
